package com.example.arithmetic.tree;

/**
 * 完全二叉树
 * 一棵二叉树中，只有最下面两层结点的度可以小于2，并且最下层的叶结点集中在靠左的若干位置上，这样的二叉树称为完全二叉树。
 *完全二叉树是由满二叉树而引出来的。对于深度为K的，有n个结点的二叉树，
 * 当且仅当其每一个结点都与深度为K的满二叉树中编号从1至n的结点一一对应时称之为完全二叉树。

 若设二叉树的深度为h，除第 h 层外，其它各层 (1～h-1) 的结点数都达到最大个数，
 第h 层所有的结点都连续集中在最左边，这就是完全二叉树。

 （大家好好理解一下上面两个定义，是等价的~~）

 满二叉树一定是完全二叉树，完全二叉树不一定是满二叉树。

 深度为k的完全二叉树，至少有2^(k-1)个节点，至多有2^k-1个节点。
 树高h=log2n + 1。

 如果一个完全二叉树的结点总数为768个，求叶子结点的个数。

 由二叉树的性质知：n0=n2+1，将之带入768=n0+n1+n2中得：768=n1+2n2+1，
 因为完全二叉树度为1的结点个数要么为0，要么为1，那么就把n1=0或者1都代入公式中，
 很容易发现n1=1才符合条件。所以算出来n2=383，所以叶子结点个数n0=n2+1=384。

 总结规律：如果一棵完全二叉树的结点总数为n，那么叶子结点等于n/2（当n为偶数时）或者(n+1)/2（当n为奇数时）

 n=n0+n1+n2;
 n=2*n2+n1+1
 n0+n2=

 *
 */

public class CompleteTree {
}
